let TRUE  = \x y -> x
let FALSE = \x y -> y
let ITE   = \b x y -> b x y
let NOT   = \b x y -> b y x
let AND   = \b1 b2 -> ITE b1 b2 FALSE
let OR    = \b1 b2 -> ITE b1 TRUE b2

let PAIR = \x y b -> b x y
let FST  = \p -> p TRUE
let SND  = \p -> p FALSE

let ZERO  = \f x -> x
let ONE   = \f x -> f x
let TWO   = \f x -> f (f x)
let THREE = \f x -> f (f (f x))
let FOUR  = \f x -> f (f (f (f x)))

let INC   = \n f x -> f (n f x)
let SKIP1 = \f p -> PAIR TRUE (ITE (FST p) (f (SND p)) (SND p))
let DEC   = \n   -> SND (n (SKIP1 INC) (PAIR FALSE ZERO))
let SUB   = \n m -> m DEC n
let ISZ   = \n -> n (\z -> FALSE) TRUE
let EQL   = \n m -> AND (ISZ (SUB n m)) (ISZ (SUB m n))

let FIX   = \stp -> (\x -> stp (x x)) (\x -> stp (x x))




let HAS       = \x s -> s x  
let EMPTY     = \x -> FALSE
let INSERT    = \n s -> (\x -> ITE (EQL n x) TRUE (s x))
let REMOVE    = \n s -> (\x -> ITE (EQL n x) FALSE (s x))
let INTERSECT = \s1 s2 -> (\x -> AND (s1 x) (s2 x))
let UNION     = \s1 s2 -> (\x -> OR (s1 x) (s2 x))

let S012 = INSERT ZERO (INSERT ONE (INSERT TWO EMPTY))
let S234 = INSERT TWO (INSERT THREE (INSERT FOUR EMPTY))

eval empty :
  HAS EMPTY ZERO 
  =~> FALSE
  
eval insert_0 :
  HAS S012 ZERO
  =~> TRUE
  
eval insert_1 :
  HAS S012 THREE
  =~> FALSE
  
eval intersect_0 :
  HAS (INTERSECT S012 S234) TWO 
  =~> TRUE
  
eval intersect_1 :
  HAS (INTERSECT S012 S234) THREE
  =~> FALSE
  
  
  
  


  
  
  
  

  